{"dependencies":[{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villians = new Set();\n    villians.add('Joker');\n    villians.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element, \nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n    \n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n    \n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe \n[Dart Language Specification](https://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"kind":"class","name":"Object","id":"Object","comment":"\nEverything in Dart is an [Object].\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"48"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"67"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"79"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"62"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"84"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"18"}],"uri":"dart-sdk/lib/core/object.dart","line":"10"}],"uri":"dart-sdk/lib/core/core.dart","line":"153"}],"kind":"library","id":"undone","comment":"A library for undo and redo.","children":[{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"bool","refId":"dart.core/bool"}]},"kind":"method","name":"redo","id":"redo0()","comment":"Redo the next action to be redone in the top-level [schedule], if any.\nCompletes `true` if an action was redone or else completes `false`.","line":"54"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"bool","refId":"dart.core/bool"}]},"kind":"method","name":"undo","id":"undo0()","comment":"Undo the next action to be undone in the top-level [schedule], if any.\nCompletes `true` if an action was undone or else completes `false`.","line":"50"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"transact","id":"transact1()","comment":"Build and compute a [Transaction] using the top-level [schedule].\nReturns a Future for the transaction's completion.","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"build","id":"build","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"32"},{"returnType":{"name":"Schedule","refId":"undone/Schedule"},"kind":"method","name":"schedule","id":"schedule0()","comment":"The isolate's top-level [Schedule].","line":"24"},{"ref":{"name":"Schedule","refId":"undone/Schedule"},"kind":"property","name":"schedule","id":"schedule","comment":"The isolate's top-level [Schedule].","line":"24"},{"ref":{"name":"Transaction","refId":"undone/Transaction"},"kind":"variable","name":"_transaction","id":"_transaction","isPrivate":true,"line":"29"},{"ref":{"name":"Schedule","refId":"undone/Schedule"},"kind":"variable","name":"_schedule","id":"_schedule","isPrivate":true,"line":"22"},{"ref":{"name":"Logger","refId":"logging/Logger"},"kind":"variable","name":"_logger","id":"_logger","isPrivate":true,"line":"20"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"Schedule","id":"Schedule","comment":"An asynchronous schedule of actions.\n\nA schedule is a function that can be [call]ed with [Action]s.  The order \nof such calls is preserved in a history to allow for [undo] and [redo].  An \naction may be scheduled at any time; if the schedule is not [busy] then it \nwill be called immediately, otherwise it will be queued to be called as soon \nas possible.  Methods to change the history such as [undo] and [redo] can \n_not_ be invoked when the schedule is [busy].  This ensures that all queued \nactions are called and the schedule reaches an idle state before the history \nmay be modified.  Each schedule is a state machine, and its [states] are \nobservable as a stream; this provides a convenient means to connect a user \ninterface to the history control methods.","children":[{"isSetter":true,"kind":"method","name":"_error=","id":"_error=1()","children":[{"kind":"param","name":"e","id":"e"}],"isPrivate":true,"line":"253"},{"isSetter":true,"kind":"method","name":"_state=","id":"_state=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"nextState","id":"nextState"}],"isPrivate":true,"line":"260"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"call","id":"call1()","comment":"Schedule the given [action] to be called.  If this schedule is not [busy], \nthe action will be called immediately.  Else, the action will be deferred \nin order behind any other pending actions to be called once this schedule \nreaches an idle state.","children":[{"ref":{"name":"Action","refId":"undone/Action"},"kind":"param","name":"action","id":"action"}],"line":"276"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"clear","id":"clear0()","comment":"Clears this schedule if [canClear] is `true` at this time and returns\n`true` if the operation succeeds or `false` if it does not succeed.","line":"296"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"_do","id":"_do1()","children":[{"kind":"param","name":"action","id":"action"}],"isPrivate":true,"line":"311"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"_flush","id":"_flush0()","isPrivate":true,"line":"343"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_log","id":"_log1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"message","id":"message","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"isPrivate":true,"line":"373"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"bool","refId":"dart.core/bool"}]},"kind":"method","name":"redo","id":"redo0()","comment":"Redo the next action to be redone in this schedule, if any.\nCompletes `true` if an action was redone or else completes `false`.","line":"384"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"bool","refId":"dart.core/bool"}]},"kind":"method","name":"to","id":"to1()","comment":"Undo or redo all ordered actions in this schedule until the given [action] \nis done.  The state of the schedule after this operation is equal to the \nstate upon completion of the given action. Completes `false` if any undo \nor redo operations performed complete `false`, if the schedule does not \ncontain the given action, or if the schedule is [busy].","children":[{"kind":"param","name":"action","id":"action"}],"line":"417"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_to","id":"_to2()","children":[{"kind":"param","name":"action","id":"action"},{"kind":"param","name":"completer","id":"completer"}],"isPrivate":true,"line":"429"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"bool","refId":"dart.core/bool"}]},"kind":"method","name":"undo","id":"undo0()","comment":"Undo the next action to be undone in this schedule, if any.\nCompletes `true` if an action was undone or else completes `false`.","line":"459"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"wait","id":"wait1()","comment":"Wait for this schedule to reach the given [state].\nCompletes on the next transition to the given state, or immediately if the \nstate is the current state of this schedule.","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"state","id":"state"}],"line":"489"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"busy","id":"busy","comment":"Whether or not this schedule is busy performing another action.\nThis is always `true` when called from any continuations that are\nchained to Futures returned by methods on this schedule.\nThis is also `true` if this schedule has an [error].","line":"233"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"canClear","id":"canClear","comment":"Whether or not this schedule can be [clear]ed at the present time.","line":"236"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"_canRedo","id":"_canRedo","isPrivate":true,"line":"238"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"canRedo","id":"canRedo","comment":"Whether or not the [redo] method may be called at the present time.","line":"240"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"_canUndo","id":"_canUndo","isPrivate":true,"line":"242"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"canUndo","id":"canUndo","comment":"Whether or not the [undo] method may be called at the present time.","line":"244"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"hasError","id":"hasError","comment":"Whether or not this schedule has an [error].","line":"247"},{"kind":"property","name":"error","id":"error","comment":"The current error, if [hasError] is `true`.  This schedule will remain\n[busy] for as long as this schedule [hasError].  You may [clear] this\nschedule after dealing with the error condition in order to use it again.","line":"252"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"_state","id":"_state","isPrivate":true,"line":"259"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"property","name":"states","id":"states","comment":"An observable stream of this schedule's state transitions.","line":"270"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"STATE_IDLE","id":"STATE_IDLE","comment":"A schedule is idle (not busy).","line":"208"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"STATE_CALL","id":"STATE_CALL","comment":"A schedule is busy executing a new action.","line":"210"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"STATE_FLUSH","id":"STATE_FLUSH","comment":"A schedule is busy flushing pending actions.","line":"212"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"STATE_REDO","id":"STATE_REDO","comment":"A schedule is busy performing a redo operation.","line":"214"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"STATE_UNDO","id":"STATE_UNDO","comment":"A schedule is busy performing an undo operation.","line":"216"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"STATE_TO","id":"STATE_TO","comment":"A schedule is busy performing a to operation.","line":"218"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"STATE_ERROR","id":"STATE_ERROR","comment":"A schedule has an error.","line":"220"},{"isFinal":true,"kind":"variable","name":"_actions","id":"_actions","isPrivate":true,"line":"222"},{"isFinal":true,"kind":"variable","name":"_pending","id":"_pending","isPrivate":true,"line":"224"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_nextUndo","id":"_nextUndo","isPrivate":true,"line":"225"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_currState","id":"_currState","isPrivate":true,"line":"226"},{"kind":"variable","name":"_err","id":"_err","isPrivate":true,"line":"227"},{"isFinal":true,"kind":"variable","name":"_states","id":"_states","isPrivate":true,"line":"268"}],"line":"206"},{"superclass":{"name":"Action","refId":"undone/Action"},"kind":"class","name":"Transaction","id":"Transaction","comment":"A sequence of actions that are done and undone together as if one action.\n\nA transaction is itself an action that may be [call]ed on a schedule.\nWhen a transaction is scheduled to be done or undone it will do or undo\nall of its actions in sequence.  Any errors that occur when doing one of\nits actions will cause the transaction to attempt to undo all of its actions\nthat were done prior to the error; this is known as rollback.  These errors\nwill be wrapped in a [TransactionError] and completed to the caller.","children":[{"returnType":{"name":"Future","refId":"dart.async/Future"},"isStatic":true,"kind":"method","name":"_do_","id":"_do_1()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Action","refId":"undone/Action"}]},"kind":"param","name":"actions","id":"actions"}],"isPrivate":true,"line":"159"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"isStatic":true,"kind":"method","name":"_undo_","id":"_undo_2()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Action","refId":"undone/Action"}]},"kind":"param","name":"actions","id":"actions"},{"kind":"param","name":"_","id":"_","isPrivate":true}],"isPrivate":true,"line":"184"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","comment":"Adds the given [action] to this transaction.","children":[{"ref":{"name":"Action","refId":"undone/Action"},"kind":"param","name":"action","id":"action"}],"line":"191"},{"kind":"constructor","name":"","id":"0()","comment":"Constructs a new empty transaction.","line":"188"}],"line":"157"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"TransactionError","id":"TransactionError","comment":"An error encountered during a transaction.","children":[{"kind":"property","name":"rollbackError","id":"rollbackError","comment":"An error encountered during transaction rollback; may be `null` if none.","line":"144"},{"isFinal":true,"kind":"variable","name":"cause","id":"cause","comment":"The caught object that caused the transaction to err.","line":"141"},{"kind":"variable","name":"_rollbackError","id":"_rollbackError","isPrivate":true,"line":"142"},{"kind":"constructor","name":"","id":"1()","comment":"Constructs a new transaction error with the given cause.","children":[{"initializedField":{"name":"cause","refId":"undone/TransactionError/cause"},"kind":"param","name":"cause","id":"cause"}],"line":"146"}],"line":"139"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"Action","id":"Action","comment":"An action that can be done and undone.\n\nActions are comprised of a pair of functions: one to [Do] the action and\nanother to [Undo] the action.  The action object is itself a function that \ncan be [call]ed to schedule it to be done on the top-level [schedule] or\nto add it to a [Transaction] if called within the scope of [transact].\nActions may also be constructed with a pair of [DoAsync] and [UndoAsync]\nfunctions using the [new Action.async] constructor.  All actions are done\nand undone asynchronously, regardless of the functions themselves.  Actions\nmay be optionally typed by their argument and result objects, [A] and [R].\nThe action type may be extended to define custom actions although this may\noften not be necessary; constructing an action with the functions to do and\nundo the desired operation is often the simplest and best approach.","children":[{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"R","refId":"undone/Action/R"}]},"kind":"method","name":"call","id":"call0()","comment":"Schedules this action to be called on the top-level [schedule].  If this\naction is called within the scope of a top-level [transact] method it will\ninstead be added to that transaction.  Completes with the result of the\naction in both cases.","line":"96"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"R","refId":"undone/Action/R"}]},"kind":"method","name":"_defer","id":"_defer0()","isPrivate":true,"line":"104"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"R","refId":"undone/Action/R"}]},"kind":"method","name":"_execute","id":"_execute0()","isPrivate":true,"line":"111"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"_unexecute","id":"_unexecute0()","isPrivate":true,"line":"133"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"135"},{"ref":{"name":"A","refId":"undone/Action/A"},"isFinal":true,"kind":"variable","name":"_arg","id":"_arg","isPrivate":true,"line":"70"},{"ref":{"name":"R","refId":"undone/Action/R"},"kind":"variable","name":"_result","id":"_result","isPrivate":true,"line":"71"},{"ref":{"name":"DoAsync","refId":"undone/DoAsync"},"isFinal":true,"kind":"variable","name":"_do","id":"_do","isPrivate":true,"line":"72"},{"ref":{"name":"UndoAsync","refId":"undone/UndoAsync"},"isFinal":true,"kind":"variable","name":"_undo","id":"_undo","isPrivate":true,"line":"73"},{"ref":{"name":"Completer","refId":"dart.async/Completer"},"kind":"variable","name":"_deferred","id":"_deferred","isPrivate":true,"line":"74"},{"kind":"constructor","name":"","id":"3()","comment":"Constructs a new action with the given [arg]uments, [Do] function, and \n[Undo] function.  The given synchronous functions are automatically \nwrapped in futures prior to being called on a schedule.","children":[{"ref":{"name":"A","refId":"undone/Action/A"},"kind":"param","name":"arg","id":"arg"},{"ref":{"name":"Do","refId":"undone/Do"},"kind":"param","name":"d","id":"d"},{"ref":{"name":"Undo","refId":"undone/Undo"},"kind":"param","name":"u","id":"u"}],"line":"79"},{"kind":"constructor","name":"async","id":"async3()","comment":"Constructs a new action with the given [arg]uments, [DoAsync] function, \nand [UndoAsync] function.","children":[{"ref":{"name":"A","refId":"undone/Action/A"},"kind":"param","name":"arg","id":"arg"},{"ref":{"name":"DoAsync","refId":"undone/DoAsync"},"kind":"param","name":"d","id":"d"},{"ref":{"name":"UndoAsync","refId":"undone/UndoAsync"},"kind":"param","name":"u","id":"u"}],"line":"85"},{"kind":"constructor","name":"_","id":"_3()","children":[{"ref":{"name":"A","refId":"undone/Action/A"},"initializedField":{"name":"_arg","refId":"undone/Action/_arg"},"kind":"param","name":"_arg","id":"_arg","isPrivate":true},{"ref":{"name":"DoAsync","refId":"undone/DoAsync"},"initializedField":{"name":"_do","refId":"undone/Action/_do"},"kind":"param","name":"_do","id":"_do","isPrivate":true},{"ref":{"name":"UndoAsync","refId":"undone/UndoAsync"},"initializedField":{"name":"_undo","refId":"undone/Action/_undo"},"kind":"param","name":"_undo","id":"_undo","isPrivate":true}],"isPrivate":true,"line":"87"},{"kind":"typeparam","name":"A","id":"A"},{"kind":"typeparam","name":"R","id":"R"}],"line":"69"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"typedef","name":"UndoAsync","id":"UndoAsync","comment":"A function to undo an async operation on an [arg] given the prior [result].","children":[{"ref":{"name":"A","refId":"undone/UndoAsync/A"},"kind":"param","name":"arg","id":"arg"},{"ref":{"name":"R","refId":"undone/UndoAsync/R"},"kind":"param","name":"result","id":"result"},{"kind":"typeparam","name":"A","id":"A"},{"kind":"typeparam","name":"R","id":"R"}],"line":"18"},{"returnType":{"name":"void","refId":"void"},"kind":"typedef","name":"Undo","id":"Undo","comment":"A function to undo an operation on an [arg] given the prior [result].","children":[{"ref":{"name":"A","refId":"undone/Undo/A"},"kind":"param","name":"arg","id":"arg"},{"ref":{"name":"R","refId":"undone/Undo/R"},"kind":"param","name":"result","id":"result"},{"kind":"typeparam","name":"A","id":"A"},{"kind":"typeparam","name":"R","id":"R"}],"line":"15"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"R","refId":"undone/DoAsync/R"}]},"kind":"typedef","name":"DoAsync","id":"DoAsync","comment":"A function to do an async operation on an [arg] and complete a result.","children":[{"ref":{"name":"A","refId":"undone/DoAsync/A"},"kind":"param","name":"arg","id":"arg"},{"kind":"typeparam","name":"A","id":"A"},{"kind":"typeparam","name":"R","id":"R"}],"line":"12"},{"returnType":{"name":"R","refId":"undone/Do/R"},"kind":"typedef","name":"Do","id":"Do","comment":"A function to do an operation on an [arg] and return a result.","children":[{"ref":{"name":"A","refId":"undone/Do/A"},"kind":"param","name":"arg","id":"arg"},{"kind":"typeparam","name":"A","id":"A"},{"kind":"typeparam","name":"R","id":"R"}],"line":"9"}],"uri":"file:///home/ubuntu/src/github.com/rmsmith/undone/lib/undone.dart","line":"3"}