{"dependencies":[{"id":"dart.core","name":"dart:core","children":[{"id":"Object","name":"Object","children":[{"isOperator":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"==1()","name":"==","children":[{"id":"other","name":"other","kind":"param"}],"kind":"method","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","line":"29"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"toString0()","name":"toString","kind":"method","comment":"\nReturns a string representation of this object.\n","line":"48"},{"id":"noSuchMethod1()","name":"noSuchMethod","children":[{"ref":{"name":"InvocationMirror","refId":"dart.core/InvocationMirror"},"id":"invocation","name":"invocation","kind":"param"}],"kind":"method","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [InvocationMirror].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","line":"60"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"hashCode","name":"hashCode","kind":"property","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"43"},{"ref":{"name":"Type","refId":"dart.core/Type"},"id":"runtimeType","name":"runtimeType","kind":"property","comment":"\nA representation of the runtime type of the object.\n","line":"65"},{"id":"Object0()","name":"Object","kind":"constructor","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"18"}],"uri":"dart-sdk//lib/core/object.dart","kind":"class","comment":"\nEverything in Dart is an [Object].\n","line":"10"}],"uri":"dart-sdk//lib/core/core.dart","kind":"library","line":"5"}],"id":"undone","children":[{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"bool","refId":"dart.core/bool"}]},"id":"redo0()","name":"redo","kind":"method","comment":"Redo the next action to be redone in the top-level [schedule], if any.\nCompletes `true` if an action was redone or else completes `false`.","line":"58"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"bool","refId":"dart.core/bool"}]},"id":"undo0()","name":"undo","kind":"method","comment":"Undo the next action to be undone in the top-level [schedule], if any.\nCompletes `true` if an action was undone or else completes `false`.","line":"54"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"id":"transact1()","name":"transact","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"build","name":"build","children":[{"returnType":{"name":"void","refId":"void"},"id":"Function","name":"Function","uri":"dart-sdk//lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"Build and compute a [Transaction] using the top-level [schedule].\nReturns a Future for the transaction's completion.","line":"36"},{"returnType":{"name":"Schedule","refId":"undone/Schedule"},"id":"schedule0()","name":"schedule","kind":"method","comment":"The isolate's top-level [Schedule].","line":"28"},{"ref":{"name":"Schedule","refId":"undone/Schedule"},"id":"schedule","name":"schedule","kind":"property","comment":"The isolate's top-level [Schedule].","line":"28"},{"ref":{"name":"Transaction","refId":"undone/Transaction"},"id":"_transaction","name":"_transaction","kind":"variable","isPrivate":true,"line":"33"},{"ref":{"name":"Schedule","refId":"undone/Schedule"},"id":"_schedule","name":"_schedule","kind":"variable","isPrivate":true,"line":"26"},{"ref":{"name":"Logger","refId":"logging/Logger"},"id":"_logger","name":"_logger","kind":"variable","isPrivate":true,"line":"24"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"_logEnabled","name":"_logEnabled","kind":"variable","isPrivate":true,"line":"23"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"Schedule","name":"Schedule","children":[{"isSetter":true,"id":"_error=1()","name":"_error=","children":[{"id":"e","name":"e","kind":"param"}],"kind":"method","isPrivate":true,"line":"257"},{"isSetter":true,"id":"_state=1()","name":"_state=","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"nextState","name":"nextState","kind":"param"}],"kind":"method","isPrivate":true,"line":"264"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"id":"call1()","name":"call","children":[{"ref":{"name":"Action","refId":"undone/Action"},"id":"action","name":"action","kind":"param"}],"kind":"method","comment":"Schedule the given [action] to be called.  If this schedule is not [busy], \nthe action will be called immediately.  Else, the action will be deferred \nin order behind any other pending actions to be called once this schedule \nreaches an idle state.","line":"292"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"clear0()","name":"clear","kind":"method","comment":"Clears this schedule if [canClear] is `true` at this time and returns\n`true` if the operation succeeds or `false` if it does not succeed.","line":"312"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"id":"_do1()","name":"_do","children":[{"id":"action","name":"action","kind":"param"}],"kind":"method","isPrivate":true,"line":"327"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"id":"_flush0()","name":"_flush","kind":"method","isPrivate":true,"line":"362"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"bool","refId":"dart.core/bool"}]},"id":"to1()","name":"to","children":[{"id":"action","name":"action","kind":"param"}],"kind":"method","comment":"Undo or redo all ordered actions in this schedule until the given [action] \nis done.  The state of the schedule after this operation is equal to the \nstate upon completion of the given action. Completes `false` if any undo \nor redo operations performed complete `false`, if the schedule does not \ncontain the given action, or if the schedule is [busy].","line":"397"},{"returnType":{"name":"void","refId":"void"},"id":"_to2()","name":"_to","children":[{"id":"action","name":"action","kind":"param"},{"id":"completer","name":"completer","kind":"param"}],"kind":"method","isPrivate":true,"line":"409"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"bool","refId":"dart.core/bool"}]},"id":"redo0()","name":"redo","kind":"method","comment":"Redo the next action to be redone in this schedule, if any.\nCompletes `true` if an action was redone or else completes `false`.","line":"439"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"bool","refId":"dart.core/bool"}]},"id":"undo0()","name":"undo","kind":"method","comment":"Undo the next action to be undone in this schedule, if any.\nCompletes `true` if an action was undone or else completes `false`.","line":"469"},{"returnType":{"name":"void","refId":"void"},"id":"_log1()","name":"_log","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"message","name":"message","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"id":"Function","name":"Function","uri":"dart-sdk//lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","isPrivate":true,"line":"497"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"busy","name":"busy","kind":"property","comment":"Whether or not this schedule is busy performing another action.\nThis is always `true` when called from any continuations that are\nchained to Futures returned by methods on this schedule.\nThis is also `true` if this schedule has an [error].","line":"237"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"canClear","name":"canClear","kind":"property","comment":"Whether or not this schedule can be [clear]ed at the present time.","line":"240"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"_canRedo","name":"_canRedo","kind":"property","isPrivate":true,"line":"242"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"canRedo","name":"canRedo","kind":"property","comment":"Whether or not the [redo] method may be called at the present time.","line":"244"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"_canUndo","name":"_canUndo","kind":"property","isPrivate":true,"line":"246"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"canUndo","name":"canUndo","kind":"property","comment":"Whether or not the [undo] method may be called at the present time.","line":"248"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"hasError","name":"hasError","kind":"property","comment":"Whether or not this schedule has an [error].","line":"251"},{"id":"error","name":"error","kind":"property","comment":"The current error, if [hasError] is `true`.  This schedule will remain\n[busy] for as long as this schedule [hasError].  You may [clear] this\nschedule after dealing with the error condition in order to use it again.","line":"256"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"_state","name":"_state","kind":"property","isPrivate":true,"line":"263"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"_stateString","name":"_stateString","kind":"property","isPrivate":true,"line":"272"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"states","name":"states","kind":"property","comment":"An observable stream of this schedule's state transitions.","line":"286"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"id":"STATE_IDLE","name":"STATE_IDLE","kind":"variable","line":"212"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"id":"STATE_CALL","name":"STATE_CALL","kind":"variable","line":"214"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"id":"STATE_FLUSH","name":"STATE_FLUSH","kind":"variable","line":"216"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"id":"STATE_REDO","name":"STATE_REDO","kind":"variable","line":"218"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"id":"STATE_UNDO","name":"STATE_UNDO","kind":"variable","line":"220"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"id":"STATE_TO","name":"STATE_TO","kind":"variable","line":"222"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"id":"STATE_ERROR","name":"STATE_ERROR","kind":"variable","line":"224"},{"isFinal":true,"id":"_actions","name":"_actions","kind":"variable","isPrivate":true,"line":"226"},{"isFinal":true,"id":"_pending","name":"_pending","kind":"variable","isPrivate":true,"line":"228"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"_nextUndo","name":"_nextUndo","kind":"variable","isPrivate":true,"line":"229"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"_currState","name":"_currState","kind":"variable","isPrivate":true,"line":"230"},{"id":"_err","name":"_err","kind":"variable","isPrivate":true,"line":"231"},{"isFinal":true,"id":"_states","name":"_states","kind":"variable","isPrivate":true,"line":"284"}],"kind":"class","comment":"An asynchronous schedule of actions.\n\nA schedule is a function that can be [call]ed with [Action]s.  The order \nof such calls is preserved in a history to allow for [undo] and [redo].  An \naction may be scheduled at any time; if the schedule is not [busy] then it \nwill be called immediately, otherwise it will be queued to be called as soon \nas possible.  Methods to change the history such as [undo] and [redo] can \n_not_ be invoked when the schedule is [busy].  This ensures that all queued \nactions are called and the schedule reaches an idle state before the history \nmay be modified.  Each schedule is a state machine, and its [states] are \nobservable as a stream; this provides a convenient means to connect a user \ninterface to the history control methods.","line":"210"},{"superclass":{"name":"Action","refId":"undone/Action"},"id":"Transaction","name":"Transaction","children":[{"isStatic":true,"returnType":{"name":"Future","refId":"dart.async/Future"},"id":"_do_1()","name":"_do_","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Action","refId":"undone/Action"}]},"id":"actions","name":"actions","kind":"param"}],"kind":"method","isPrivate":true,"line":"163"},{"isStatic":true,"returnType":{"name":"Future","refId":"dart.async/Future"},"id":"_undo_2()","name":"_undo_","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Action","refId":"undone/Action"}]},"id":"actions","name":"actions","kind":"param"},{"id":"_","name":"_","kind":"param","isPrivate":true}],"kind":"method","isPrivate":true,"line":"188"},{"returnType":{"name":"void","refId":"void"},"id":"add1()","name":"add","children":[{"ref":{"name":"Action","refId":"undone/Action"},"id":"action","name":"action","kind":"param"}],"kind":"method","comment":"Adds the given [action] to this transaction.","line":"195"},{"id":"Transaction0()","name":"Transaction","kind":"constructor","comment":"Constructs a new empty transaction.","line":"192"}],"kind":"class","comment":"A sequence of actions that are done and undone together as if one action.\n\nA transaction is itself an action that may be [call]ed on a schedule.\nWhen a transaction is scheduled to be done or undone it will do or undo\nall of its actions in sequence.  Any errors that occur when doing one of\nits actions will cause the transaction to attempt to undo all of its actions\nthat were done prior to the error; this is known as rollback.  These errors\nwill be wrapped in a [TransactionError] and completed to the caller.","line":"161"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"TransactionError","name":"TransactionError","children":[{"id":"rollbackError","name":"rollbackError","kind":"property","comment":"An error encountered during transaction rollback; may be `null` if none.","line":"148"},{"isFinal":true,"id":"cause","name":"cause","kind":"variable","line":"145"},{"id":"_rollbackError","name":"_rollbackError","kind":"variable","isPrivate":true,"line":"146"},{"id":"TransactionError1()","name":"TransactionError","children":[{"initializedField":{"name":"cause","refId":"undone/TransactionError/cause"},"id":"cause","name":"cause","kind":"param"}],"kind":"constructor","comment":"Constructs a new transaction error with the given cause.","line":"150"}],"kind":"class","comment":"An error encountered during a transaction.","line":"143"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"Action","name":"Action","children":[{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"R","refId":"undone/Action/R"}]},"id":"call0()","name":"call","kind":"method","comment":"Schedules this action to be called on the top-level [schedule].  If this\naction is called within the scope of a top-level [transact] method it will\ninstead be added to that transaction.  Completes with the result of the\naction in both cases.","line":"100"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"R","refId":"undone/Action/R"}]},"id":"_defer0()","name":"_defer","kind":"method","isPrivate":true,"line":"108"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"R","refId":"undone/Action/R"}]},"id":"_execute0()","name":"_execute","kind":"method","isPrivate":true,"line":"115"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"id":"_unexecute0()","name":"_unexecute","kind":"method","isPrivate":true,"line":"137"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"toString0()","name":"toString","kind":"method","line":"139"},{"isFinal":true,"ref":{"name":"A","refId":"undone/Action/A"},"id":"_arg","name":"_arg","kind":"variable","isPrivate":true,"line":"74"},{"ref":{"name":"R","refId":"undone/Action/R"},"id":"_result","name":"_result","kind":"variable","isPrivate":true,"line":"75"},{"isFinal":true,"ref":{"name":"DoAsync","refId":"undone/DoAsync"},"id":"_do","name":"_do","kind":"variable","isPrivate":true,"line":"76"},{"isFinal":true,"ref":{"name":"UndoAsync","refId":"undone/UndoAsync"},"id":"_undo","name":"_undo","kind":"variable","isPrivate":true,"line":"77"},{"ref":{"name":"Completer","refId":"dart.async/Completer"},"id":"_deferred","name":"_deferred","kind":"variable","isPrivate":true,"line":"78"},{"id":"Action3()","name":"Action","children":[{"ref":{"name":"A","refId":"undone/Action/A"},"id":"arg","name":"arg","kind":"param"},{"ref":{"name":"Do","refId":"undone/Do"},"id":"d","name":"d","kind":"param"},{"ref":{"name":"Undo","refId":"undone/Undo"},"id":"u","name":"u","kind":"param"}],"kind":"constructor","comment":"Constructs a new action with the given [arg]uments, [Do] function, and \n[Undo] function.  The given synchronous functions are automatically \nwrapped in futures prior to being called on a schedule.","line":"83"},{"id":"Action.async3()","name":"Action.async","children":[{"ref":{"name":"A","refId":"undone/Action/A"},"id":"arg","name":"arg","kind":"param"},{"ref":{"name":"DoAsync","refId":"undone/DoAsync"},"id":"d","name":"d","kind":"param"},{"ref":{"name":"UndoAsync","refId":"undone/UndoAsync"},"id":"u","name":"u","kind":"param"}],"kind":"constructor","comment":"Constructs a new action with the given [arg]uments, [DoAsync] function, \nand [UndoAsync] function.","line":"89"},{"id":"Action._3()","name":"Action._","children":[{"initializedField":{"name":"_arg","refId":"undone/Action/_arg"},"ref":{"name":"A","refId":"undone/Action/A"},"id":"_arg","name":"_arg","kind":"param","isPrivate":true},{"initializedField":{"name":"_do","refId":"undone/Action/_do"},"ref":{"name":"DoAsync","refId":"undone/DoAsync"},"id":"_do","name":"_do","kind":"param","isPrivate":true},{"initializedField":{"name":"_undo","refId":"undone/Action/_undo"},"ref":{"name":"UndoAsync","refId":"undone/UndoAsync"},"id":"_undo","name":"_undo","kind":"param","isPrivate":true}],"kind":"constructor","isPrivate":true,"line":"91"},{"id":"A","name":"A","kind":"typeparam"},{"id":"R","name":"R","kind":"typeparam"}],"kind":"class","comment":"An action that can be done and undone.\n\nActions are comprised of a pair of functions: one to [Do] the action and\nanother to [Undo] the action.  The action object is itself a function that \ncan be [call]ed to schedule it to be done on the top-level [schedule] or\nto add it to a [Transaction] if called within the scope of [transact].\nActions may also be constructed with a pair of [DoAsync] and [UndoAsync]\nfunctions using the [new Action.async] constructor.  All actions are done\nand undone asynchronously, regardless of the functions themselves.  Actions\nmay be optionally typed by their argument and result objects, [A] and [R].\nThe action type may be extended to define custom actions although this may\noften not be necessary; constructing an action with the functions to do and\nundo the desired operation is often the simplest and best approach.","line":"73"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"id":"UndoAsync","name":"UndoAsync","children":[{"ref":{"name":"A","refId":"undone/UndoAsync/A"},"id":"arg","name":"arg","kind":"param"},{"ref":{"name":"R","refId":"undone/UndoAsync/R"},"id":"result","name":"result","kind":"param"},{"id":"A","name":"A","kind":"typeparam"},{"id":"R","name":"R","kind":"typeparam"}],"kind":"typedef","comment":"A function to undo an async operation on an [arg] given the prior [result].","line":"18"},{"returnType":{"name":"void","refId":"void"},"id":"Undo","name":"Undo","children":[{"ref":{"name":"A","refId":"undone/Undo/A"},"id":"arg","name":"arg","kind":"param"},{"ref":{"name":"R","refId":"undone/Undo/R"},"id":"result","name":"result","kind":"param"},{"id":"A","name":"A","kind":"typeparam"},{"id":"R","name":"R","kind":"typeparam"}],"kind":"typedef","comment":"A function to undo an operation on an [arg] given the prior [result].","line":"15"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"R","refId":"undone/DoAsync/R"}]},"id":"DoAsync","name":"DoAsync","children":[{"ref":{"name":"A","refId":"undone/DoAsync/A"},"id":"arg","name":"arg","kind":"param"},{"id":"A","name":"A","kind":"typeparam"},{"id":"R","name":"R","kind":"typeparam"}],"kind":"typedef","comment":"A function to do an async operation on an [arg] and complete a result.","line":"12"},{"returnType":{"name":"R","refId":"undone/Do/R"},"id":"Do","name":"Do","children":[{"ref":{"name":"A","refId":"undone/Do/A"},"id":"arg","name":"arg","kind":"param"},{"id":"A","name":"A","kind":"typeparam"},{"id":"R","name":"R","kind":"typeparam"}],"kind":"typedef","comment":"A function to do an operation on an [arg] and return a result.","line":"9"}],"uri":"file:///home/ubuntu/src/github.com/rmsmith/undone/lib/undone.dart","kind":"library","comment":"A library for undo and redo.","line":"3"}