{"dependencies":[{"comment":"A library for undo and redo.","uri":"file:///home/ubuntu/src/github.com/rmsmith/undone/lib/undone.dart","id":"undone","children":[{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"An action that can be done and undone.\n\nActions are comprised of a pair of functions: one to [Do] the action and\nanother to [Undo] the action.  The action object is itself a function that \ncan be [call]ed to schedule it to be done on the top-level [schedule] or\nto add it to a [Transaction] if called within the scope of [transact].\nActions may also be constructed with a pair of [DoAsync] and [UndoAsync]\nfunctions using the [new Action.async] constructor.  All actions are done\nand undone asynchronously, regardless of the functions themselves.  Actions\nmay be optionally typed by their argument and result objects, [A] and [R].\nThe action type may be extended to define custom actions although this may\noften not be necessary; constructing an action with the functions to do and\nundo the desired operation is often the simplest and best approach.","name":"Action","id":"Action","children":[{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"undone/Action/R","name":"R"}],"name":"Future"},"comment":"Schedules this action to be called on the top-level [schedule].  If this\naction is called within the scope of a top-level [transact] method it will\ninstead be added to that transaction.  Completes with the result of the\naction in both cases.","name":"call","id":"call0()","line":"96","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"undone/Action/R","name":"R"}],"name":"Future"},"name":"_defer","isPrivate":true,"id":"_defer0()","line":"104","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"undone/Action/R","name":"R"}],"name":"Future"},"name":"_execute","isPrivate":true,"id":"_execute0()","line":"111","kind":"method"},{"returnType":{"refId":"dart.async/Future","name":"Future"},"name":"_unexecute","isPrivate":true,"id":"_unexecute0()","line":"133","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"135","kind":"method"},{"ref":{"refId":"undone/Action/A","name":"A"},"isFinal":true,"name":"_arg","isPrivate":true,"id":"_arg","line":"70","kind":"variable"},{"ref":{"refId":"undone/Action/R","name":"R"},"name":"_result","isPrivate":true,"id":"_result","line":"71","kind":"variable"},{"ref":{"refId":"undone/DoAsync","name":"DoAsync"},"isFinal":true,"name":"_do","isPrivate":true,"id":"_do","line":"72","kind":"variable"},{"ref":{"refId":"undone/UndoAsync","name":"UndoAsync"},"isFinal":true,"name":"_undo","isPrivate":true,"id":"_undo","line":"73","kind":"variable"},{"ref":{"refId":"dart.async/Completer","name":"Completer"},"name":"_deferred","isPrivate":true,"id":"_deferred","line":"74","kind":"variable"},{"comment":"Constructs a new action with the given [arg]uments, [Do] function, and \n[Undo] function.  The given synchronous functions are automatically \nwrapped in futures prior to being called on a schedule.","name":"Action","id":"Action3()","children":[{"ref":{"refId":"undone/Action/A","name":"A"},"name":"arg","id":"arg","kind":"param"},{"ref":{"refId":"undone/Do","name":"Do"},"name":"d","id":"d","kind":"param"},{"ref":{"refId":"undone/Undo","name":"Undo"},"name":"u","id":"u","kind":"param"}],"line":"79","kind":"constructor"},{"comment":"Constructs a new action with the given [arg]uments, [DoAsync] function, \nand [UndoAsync] function.","name":"Action.async","id":"Action.async3()","children":[{"ref":{"refId":"undone/Action/A","name":"A"},"name":"arg","id":"arg","kind":"param"},{"ref":{"refId":"undone/DoAsync","name":"DoAsync"},"name":"d","id":"d","kind":"param"},{"ref":{"refId":"undone/UndoAsync","name":"UndoAsync"},"name":"u","id":"u","kind":"param"}],"line":"85","kind":"constructor"},{"name":"Action._","isPrivate":true,"id":"Action._3()","children":[{"initializedField":{"refId":"undone/Action/_arg","name":"_arg"},"ref":{"refId":"undone/Action/A","name":"A"},"name":"_arg","isPrivate":true,"id":"_arg","kind":"param"},{"initializedField":{"refId":"undone/Action/_do","name":"_do"},"ref":{"refId":"undone/DoAsync","name":"DoAsync"},"name":"_do","isPrivate":true,"id":"_do","kind":"param"},{"initializedField":{"refId":"undone/Action/_undo","name":"_undo"},"ref":{"refId":"undone/UndoAsync","name":"UndoAsync"},"name":"_undo","isPrivate":true,"id":"_undo","kind":"param"}],"line":"87","kind":"constructor"},{"name":"A","id":"A","kind":"typeparam"},{"name":"R","id":"R","kind":"typeparam"}],"line":"69","kind":"class"}],"line":"3","kind":"library"},{"uri":"dart-sdk/lib/core/core.dart","name":"dart:core","id":"dart.core","children":[{"comment":"\nEverything in Dart is an [Object].\n","uri":"dart-sdk/lib/core/object.dart","name":"Object","id":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a string representation of this object.\n","name":"toString","id":"toString0()","line":"48","kind":"method"},{"comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","id":"noSuchMethod1()","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"name":"invocation","id":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","id":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","id":"runtimeType","line":"65","kind":"property"},{"comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"Object","id":"Object0()","line":"18","kind":"constructor"}],"line":"10","kind":"class"}],"line":"5","kind":"library"}],"comment":"Actions that use `dart:mirrors`.","uri":"file:///home/ubuntu/src/github.com/rmsmith/undone/lib/mirrors.dart","id":"mirrors","children":[{"superclass":{"refId":"undone/Action","name":"Action"},"name":"SetField","id":"SetField","children":[{"returnType":{"refId":"dart.core/Object","name":"Object"},"isStatic":true,"name":"_do","isPrivate":true,"id":"_do1()","children":[{"ref":{"refId":"dart.core/List","name":"List"},"name":"args","id":"args","kind":"param"}],"line":"10","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isStatic":true,"name":"_undo","isPrivate":true,"id":"_undo2()","children":[{"ref":{"refId":"dart.core/List","name":"List"},"name":"args","id":"args","kind":"param"},{"ref":{"refId":"dart.core/Object","name":"Object"},"name":"oldArg","id":"oldArg","kind":"param"}],"line":"19","kind":"method"},{"name":"SetField","id":"SetField3()","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"name":"o","id":"o","kind":"param"},{"ref":{"refId":"dart.core/Symbol","name":"Symbol"},"name":"fieldName","id":"fieldName","kind":"param"},{"ref":{"refId":"dart.core/Object","name":"Object"},"name":"arg","id":"arg","kind":"param"}],"line":"25","kind":"constructor"}],"line":"8","kind":"class"}],"line":"3","kind":"library"}